#################
### OSMReader ###

# graph.dataaccess=MMAP_STORE_SYNC
graph.dataaccess=RAM_STORE

# The high-resolution index is bigger and slightly slower but a lot more precise. see #17.
# Resolution is in meter, decrease from 1000 to 500 in order to speed up queries (but will increase size)
#index.highResolution=-1
index.highResolution=500


# Default: use contraction hierarchies to speed things up. requires more RAM/disc space for holding the graph
# Use chWeighting=no to disable it (more flexibility while querying) 
# Java API usage is: GraphHopper.setCHWeighting("fastest")
#prepare.chWeighting=fastest
prepare.chWeighting=no

# increase from 1 to 5, to reduce way geometry e.g. for android
osmreader.wayPointMaxDistance=1

# Because we have so many FlagEncoders we need to use 8 instead of the default 4
# But we are actually setting this in our special S6Import class
#graph.bytesForFlags=8

#graph.flagEncoders=FOOT:com.samsix.graphhopper.S6FootFlagEncoder,CAR:com.samsix.graphhopper.S6CarFlagEncoder

# if you want to reduce storage size and you don't need instructions for a path uncomment this
# osmreader.instructions=false

